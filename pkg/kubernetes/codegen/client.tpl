// Code generated by helmit-generate. DO NOT EDIT.

package {{ .Package.Name }}

import (
    {{- range $name, $group := .Groups }}
    {{ $group.Package.Alias }} {{ $group.Package.Path | quote }}
    {{- end }}
	"github.com/onosproject/helmit/pkg/helm"
    "github.com/onosproject/helmit/pkg/kubernetes/config"
    "github.com/onosproject/helmit/pkg/kubernetes/resource"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/kubernetes"
)

// New returns a new Kubernetes client for the current namespace
func New() (Client, error) {
	return NewForNamespace(config.GetNamespaceFromEnv())
}

// NewOrDie returns a new Kubernetes client for the current namespace
func NewOrDie() Client {
	client, err := New()
	if err != nil {
		panic(err)
	}
	return client
}

// NewForNamespace returns a new Kubernetes client for the given namespace
func NewForNamespace(namespace string) (Client, error) {
    return newFiltered{{ .Types.Interface }}(namespace, resource.NoFilter)
}

// NewForNamespaceOrDie returns a new Kubernetes client for the given namespace
func NewForNamespaceOrDie(namespace string) Client {
	client, err := NewForNamespace(namespace)
	if err != nil {
		panic(err)
	}
	return client
}

// {{ .Types.Interface }} is a Kubernetes client
type {{ .Types.Interface }} interface {
	// Namespace returns the client namespace
	Namespace() string

	// Config returns the Kubernetes REST client configuration
	Config() *rest.Config

	// Clientset returns the client's Clientset
	Clientset() *kubernetes.Clientset

    {{- range $name, $group := .Groups }}
    {{ $group.Names.Proper }}() {{ $group.Package.Alias }}.{{ $group.Types.Interface }}
    {{- end }}
}

// NewForRelease returns a new Kubernetes client for the given release
func NewForRelease(release *helm.Release) ({{ .Types.Interface }}, error) {
    return newFiltered{{ .Types.Interface }}(release.Namespace(), release.Filter)
}

// NewForReleaseOrDie returns a new Kubernetes client for the given release
func NewForReleaseOrDie(release *helm.Release) {{ .Types.Interface }} {
    client, err := NewForRelease(release)
    if err != nil {
        panic(err)
    }
    return client
}

func newFiltered{{ .Types.Interface }}(namespace string, filter resource.Filter) ({{ .Types.Interface }}, error) {
	kubernetesConfig, err := config.GetRestConfig()
	if err != nil {
		return nil, err
	}
	kubernetesClient, err := kubernetes.NewForConfig(kubernetesConfig)
	if err != nil {
    	return nil, err
	}
    return &{{ .Types.Struct }}{
        namespace: namespace,
        config:    kubernetesConfig,
        client:    kubernetesClient,
        filter:    filter,
    }, nil
}

type {{ .Types.Struct }} struct {
	namespace string
	config    *rest.Config
	client    *kubernetes.Clientset
	filter    resource.Filter
}

func (c *{{ .Types.Struct }}) Namespace() string {
	return c.namespace
}

func (c *{{ .Types.Struct }}) Config() *rest.Config {
	return c.config
}

func (c *{{ .Types.Struct }}) Clientset() *kubernetes.Clientset {
	return c.client
}

{{- range $name, $group := .Groups }}
func (c *{{ .Types.Struct }}) {{ $group.Names.Proper }}() {{ $group.Package.Alias }}.{{ $group.Types.Interface }} {
    return {{ $group.Package.Alias }}.New{{ $group.Types.Interface }}(c, c.filter)
}
{{ end }}
